TITLE:: BasicMixer
summary:: A very simple mixer with amplitude control for the final audio outputs.
categories:: Libraries>Lilt2
related:: Classes/EventModel, Classes/SynthModel

DESCRIPTION::
Creates a user interface for regulating the amplitude of the first 8 audio busses of scsynth. 

This is a very small class showing how to use EventModel as a superclass. Both the GUI and the synth of the BasicMixer must be started by sending messages to an instance.  A variant of BasicMixer with more convenient methods, and auto-(re)start of the synth is in planning after SynthModel and SynthPatch classes have been implemented.  

See example at end. 

CLASSMETHODS::

METHOD:: new
Create a new instance of BasicMixer. Do not create GUI yet. To make the mixer's window use instance method makeWindow. 

ARGUMENT:: numChans
Number of output channels of the mixer. Default: 2

ARGUMENT:: maxLevel
Maximum amplitude level that will be visible in the mixer's GUI controls. Default: 1

returns:: A new instance of BasicMixer


INSTANCEMETHODS::

METHOD:: numChans
Return the current number of output channels of the mixer.

returns:: value of variable numChans

METHOD:: makeKeys
Create the names of the keys used by the mixer to create controls of the mixing synthdef as well as for the GUI display. 

returns:: An array of symbols: ['amp1', 'amp2', ... 'ampN'] where N is the number of channels. 

METHOD:: start
If the mixer is not already running, create a new Synth instance that multiplies the inputs of the mixer with the values of the user-controlled amplitude controls, and sends these to the output. 

The synth is added after the root node.  Since all other nodes are usually added inside the root node, the basic mixer will always process the output of other nodes.

returns:: The mixing Synth instance.

METHOD:: init
(describe method here)

ARGUMENT:: argNumChans
(describe argument here)

ARGUMENT:: maxLevel
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: makeWindow
(describe method here)

ARGUMENT:: name
(describe argument here)

ARGUMENT:: bounds
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: keys
(describe method here)

returns:: (describe returnvalue here)

METHOD:: set
(describe method here)

ARGUMENT:: key
(describe argument here)

ARGUMENT:: value
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: stop
(describe method here)

returns:: (describe returnvalue here)

METHOD:: synth
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
Server.default.waitForBoot({ BasicMixer().makeWindow.start;});
::
